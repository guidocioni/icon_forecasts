#!/bin/bash

# Cd into our working directory in case we're not into it already
cd "$(dirname "$0")";

echo "----------------------------------------------------------------------------------------------"
echo "icon-forecasts: Starting processing of icon-eu model data - `date`"
echo "----------------------------------------------------------------------------------------------"

# Folder to be used to download and process data
export MODEL_DATA_FOLDER="/tmp/icon-eu/"
export HOME_FOLDER=$(pwd)
export N_CONCUR_PROCESSES=12 # not used anymore as it needs to be tuned per case
export NCFTP_BOOKMARK="altervista"
DATA_DOWNLOAD=true
DATA_PLOTTING=true
DATA_UPLOAD=true

##### LOAD functions to download model data
. ./functions_download_dwd.sh
export SHELL=$(type -p bash)
# We need to open many files at the same time
ulimit -Sn 8192
# 
###########################################

# Retrieve run ##########################
if [ -f $MODEL_DATA_FOLDER/last_processed_run.txt ]; then
	latest_run=`python get_last_run.py`
	latest_processed_run=`while read line; do echo $line; done < $MODEL_DATA_FOLDER/last_processed_run.txt`
	if [ $latest_run -gt $latest_processed_run ]; then
		echo "New run ${latest_run} found! Last processed run was ${latest_processed_run}."
	else
		echo "Run ${latest_processed_run} already processed, exiting"
		exit 1
	fi
fi

export year=${latest_run:0:4} 
export month=${latest_run:4:2} 
export day=${latest_run:6:2} 
export run=${latest_run:8:2}

# Skip runs that we don't want to process
if [ $run -eq "09" ] || [ $run -eq "15" ] || [ $run -eq "21" ] || [ $run -eq "03" ]; then
	echo "Skipping run ${latest_run}"
	exit 1
fi
#############################################


mkdir -p ${MODEL_DATA_FOLDER}it
mkdir -p ${MODEL_DATA_FOLDER}de
# Move to the data folder to do processing
cd ${MODEL_DATA_FOLDER} || { echo 'Cannot change to DATA folder' ; exit 1; }

# SECTION 1 - DATA DOWNLOAD ############################################################

if [ "$DATA_DOWNLOAD" = true ]; then
	echo "----------------------------------------------------------------------------------------------"
	echo "icon-forecasts: Starting downloading of data - `date`"
	echo "----------------------------------------------------------------------------------------------"
	# Remove older files
	rm ${MODEL_DATA_FOLDER}*.nc
	rm ${MODEL_DATA_FOLDER}*.grib2

	# Invariant
	download_invariant_icon_eu

	#2-D variables
	variables=("T_2M" "TD_2M" "U_10M" "V_10M" "PMSL" "CAPE_ML" "VMAX_10M" "TOT_PREC"\
				"CLCL" "CLCH" "CLCT" "SNOWLMT" "HZEROCL" "H_SNOW" "SNOW_GSP"\
				"SNOW_CON" "RAIN_GSP" "RAIN_CON" "TMAX_2M" "TMIN_2M" "WW")
	parallel -j 10 --delay 1 download_merge_2d_variable_icon_eu ::: "${variables[@]}"

	#3-D variables on pressure levels
	variables=("T" "FI" "RELHUM" "U" "V" "CLC")
	parallel -j 10 --delay 2 download_merge_3d_variable_icon_eu ::: "${variables[@]}"

	#soil levelsls
	download_merge_soil_variable_icon_eu W_SO
	N_NETCDF_FILES=`find . -type f -name '*.nc' -printf x | wc -c`
fi 

############################################################


# SECTION 2 - DATA PLOTTING ############################################################

if [ "$DATA_PLOTTING" = true ]; then
	echo "----------------------------------------------------------------------------------------------"
	echo "icon-forecasts: Starting plotting of data - `date`"
	echo "----------------------------------------------------------------------------------------------"
	python --version
	cp ${HOME_FOLDER}/plotting/*.py ${MODEL_DATA_FOLDER}

	export QT_QPA_PLATFORM=offscreen # Needed to avoid errors when using Python without display

	python plot_meteogram.py Hamburg Pisa Rome Milano Naples Brocken Palermo Toulouse Utrecht Sassari Cheremule

	scripts=("plot_winter.py" "plot_cape.py" "plot_convergence.py" "plot_gph_t_500.py" "plot_gph_t_850.py" \
		"plot_gph_thetae_850.py" "plot_hsnow.py" "plot_jetstream.py" "plot_pres_t2m_winds10m.py" "plot_rain_acc.py"\
		"plot_rain_clouds.py" "plot_winds10m.py" "plot_vorticity.py" "plot_soil_moisture.py" "plot_tmax.py" "plot_tmin.py")

	projections=("euratl" "it" "de")

	parallel -j 5 python ::: "${scripts[@]}" ::: "${projections[@]}"
	rm ${MODEL_DATA_FOLDER}*.py
	N_IMAGES=`find . -type f -name '*.png' -printf x | wc -c`
fi

############################################################

# If we at least produced some netcdf and images we assume the run is succesfull and 
# store the run processed in a text file. Unfortunately there is no easy way to check
# if the processing is really succesfull as we have many errors in the process that
# don't undermine the whole processing! 
#
if [ "$N_NETCDF_FILES" -ge 2 ] && [ "$N_IMAGES" -ge 10 ]; then
	echo $year$month$day$run > last_processed_run.txt
fi


# SECTION 3 - IMAGES UPLOAD ############################################################
# Use ncftpbookmarks to add a new FTP server with credentials
if [ "$DATA_UPLOAD" = true ]; then
	echo "----------------------------------------------------------------------------------------------"
	echo "icon-forecasts: Starting FTP uploading - `date`"
	echo "----------------------------------------------------------------------------------------------"
	# First upload meteograms
	ncftpput -R -v ${NCFTP_BOOKMARK} icon_italy/meteograms meteogram_*
	#
	# Then upload the other pictures
	#
	images_output=("gph_t_850" "gph_t_500" "gph_thetae_850" "precip_clouds" "winds10m" "winds_jet" "vort_850" "hsnow" "cape"\
		"conv" "soil_moisture" "t_v_pres" "precip_acc" "vort_850" "winter" "tmax" "tmin")

	# suffix for naming
	projections_output=("" "it/" "de/")
	# remote folder on server
	projections_output_folder=("icon_forecasts" "icon_italy" "icon_de")

	# Create a lisf of all the images to upload 
	upload_elements=()
	upload_folder=()
	for i in "${!projections_output[@]}"; do
		for j in "${images_output[@]}"; do
			upload_folder+=("${projections_output_folder[$i]}/${j}")
			upload_elements+=("./${projections_output[$i]}${j}_*")
		done
	done

	parallel -j 5 --link ncftpput -R -v ${NCFTP_BOOKMARK} ::: "${upload_folder[@]}" ::: "${upload_elements[@]}"

	# Finally upload the images 
	# for k in "${upload_elements[@]}"; do
	# 	ncftpput -R -v ${NCFTP_BOOKMARK} ${k}
	# done

	rm ${MODEL_DATA_FOLDER}*.png
	rm ${MODEL_DATA_FOLDER}de/*.png
	rm ${MODEL_DATA_FOLDER}it/*.png
fi 

############################################################

# SECTION 4 - CLEANING ############################################################

echo "----------------------------------------------------------------------------------------------"
echo "icon-forecasts: Finished cleaning up - `date`"
echo "----------------------------------------------------------------------------------------------"

############################################################

cd -
